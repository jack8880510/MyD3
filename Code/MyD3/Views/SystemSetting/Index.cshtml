@{
    ViewBag.Module = "系统设置";
    ViewBag.Title = "系统设置管理";
    ViewBag.Desceiption = "维护系统中设置";
    Layout = "~/Views/Shared/Base/_Layout.cshtml";
}

@section button_list{
    <button class="btn btn-primary btn-icon-text btn-save">
        <i class="zmdi zmdi-save"></i>
        保存设置
    </button>
}

<!-- TAB控件的容器 -->
<div class="tabpanel" role="tabpanel">
</div>

<script type="text/x-jsrender" id="text-setting-tpl">
    <h4 class="m-t-25 m-b-10 c-black f-500 ">
        <i class="zmdi zmdi-format-color-text zmdi-hc-fw"></i>
        {{>DisplayName}}
    </h4>
    <div class="row p-l-15">
        <div class="form-group">
            <div class="col-xs-12 col-md-5">
                <div class="fg-line">
                    <input type="text" class="form-control" setting-element value="{{>Value}}" name="{{>Name}}" placeholder="{{>Description}}"
                           data-group-id="{{>GroupID}}"
                           {{if MaxLength && MaxLength > 0}} maxlength="{{>MaxLength}}" {{/if}} />
                </div>
            </div>
        </div>
    </div>
</script>
<script type="text/x-jsrender" id="bool-setting-tpl">
    <h4 class="m-t-25 m-b-10 c-black f-500">
        <i class="zmdi zmdi-check-circle zmdi-hc-fw"></i>
        {{>DisplayName}}
    </h4>
    <div class="row p-l-15">
        <div class="form-group">
            <div class="col-xs-12 col-md-5">
                <div class="fg-line">
                    <label class="checkbox checkbox-inline m-r-20">
                        <input setting-element type="checkbox" name="{{>Name}}"
                               data-group-id="{{>GroupID}}"
                               {{if Value == "true"}} checked="checked" {{/if}} />
                        <i class="input-helper"></i>
                        {{>Description}}
                    </label>
                </div>
            </div>
        </div>
    </div>
</script>
<script type="text/x-jsrender" id="datetime-setting-tpl">
    <h4 class="m-t-25 m-b-10 c-black f-500">
        {{if ValueType == "DATE"}}
        <i class="zmdi zmdi-calendar-alt zmdi-hc-fw"></i>
        {{else "TIME"}}
        <i class="zmdi zmdi-alarm zmdi-hc-fw"></i>
        {{else}}
        <i class="zmdi zmdi-calendar-note zmdi-hc-fw"></i>
        {{/if}}
        {{>DisplayName}}
    </h4>
    <div class="row p-l-15">
        <div class="form-group">
            <div class="col-xs-12 col-md-5">
                <div class="fg-line">
                    <input type='text' data-group-id="{{>GroupID}}" class="form-control {{>ValueType.toLowerCase()}}-picker" setting-element value="{{>Value}}" name="{{>Name}}" placeholder="{{>Description}}">
                </div>
            </div>
        </div>
    </div>
</script>
<script type="text/x-jsrender" id="select-setting-tpl">
    <h4 class="m-t-25 m-b-10 c-black f-500">
        <i class="zmdi zmdi-select-all zmdi-hc-fw"></i>
        {{>DisplayName}}
    </h4>
    <div class="row p-l-15">
        <div class="form-group">
            <div class="col-xs-12 col-md-5">
                <select class="selectpicker" setting-element name="{{>Name}}" title="{{>Description}}"
                        data-group-id="{{>GroupID}}"
                        {{if MaxLength && MaxLength > 0}}
                        multiple data-max-options="{{>MaxLength}}"
                        {{/if}}>
                    {{for render_data}}
                    <option value="{{>value}}" {{:selected}}>{{>name}}</option>
                    {{/for}}
                </select>
            </div>
        </div>
    </div>
</script>
<script type="text/x-jsrender" id="sys-setting-tpl">
    <div>
        <ul class="tab-nav" role="tablist">
            {{for SettingGroups}}
            <li><a href="#{{>GroupID}}" aria-controls="{{>GroupID}}" role="tab" data-toggle="tab">{{>GroupName}}</a></li>
            {{/for}}
        </ul>
        <form action="#" method="post">
            <div class="tab-content">
                {{for SettingGroups}}
                <div role="tabpanel" class="tab-pane" id="{{>GroupID}}">
                    {{for Settings}}
                    {{if ValueType == 'TEXT' tmpl="#text-setting-tpl" /}}
                    {{if ValueType == 'BOOL' tmpl="#bool-setting-tpl" /}}
                    {{if ValueType == 'DATE' || ValueType == 'TIME' || ValueType == 'DATE-TIME' tmpl="#datetime-setting-tpl" /}}
                    {{if ValueType == 'OPTION' tmpl="#select-setting-tpl" /}}
                    {{/for}}
                </div>
                {{/for}}
            </div>
        </form>
    </div>
</script>

@section scripts{
    <script type="text/javascript">
        $(function () {
            //向jqValidate注入所有日期相关的验证方法
            //这些方法位于jackTool.jqValidator.extend.js中，是自定义的验证方法，用于支持本地化时间验证
            jackTool.tools.view.build_validate_all_date_method();
            jackTool.tools.view.build_validate_regex_method();

            //显示一个载入对话框
            swal({
                title: "处理中",
                text: "正在载入配置，请稍后......",
                type: "info",
                showConfirmButton: false,
            })

            //从远程服务器获取配置数据
            jackTool.tools.net.get("@Url.Action("All")", getViewData_callback);

            //绑定保存按钮点击事件
            $(".btn-save").on("click", btnSave_click);
        });

        /**
        * 保存按钮点击事件
        */
        function btnSave_click(e) {
            if (!$("form").valid()) {
                return;
            }

            //开始封装对象
            var settingData = [];
            _.each($("[setting-element]"), function (item, index, list) {
                var el = $(item);

                var name = el.attr("name");
                var value = el.val();

                if (item.tagName.toUpperCase() == "INPUT") {
                    if (el.attr("type").toUpperCase() == "CHECKBOX") {
                        value = el.prop("checked") ? "true" : "false";
                    } else if (el.hasClass("date-time-picker")) {
                        value = moment(value, "YYYY年MM月DD日 HH时mm分ss秒").format("YYYY-MM-DD HH:mm:ss");
                    } else if (el.hasClass("date-picker")) {
                        value = moment(value, "YYYY年MM月DD日").format("YYYY-MM-DD");
                    } else if (el.hasClass("time-picker")) {
                        value = moment(value, "HH时mm分ss秒").format("HH:mm:ss");
                    }
                } else if (item.tagName.toUpperCase() == "SELECT") {
                    if (el.attr("multiple")) {
                        value = el.val().join(",");
                    }
                }

                settingData.push({ Name: name, Value: value });
            });

            //显示载入对话框
            swal({
                title: "处理中",
                text: "正在保存，请稍后......",
                type: "info",
                showConfirmButton: false,
            })

            //开始提交到服务器
            jackTool.tools.net.put("@Url.Action("put")", settingData, saveSetting_callback);
        }

        /**
        * 保存配置回调方法
        */
        function saveSetting_callback(result) {
            return swal({
                title: result.RCode == 0 ? "成功" : "错误",
                text: result.RCode == 0 ? "保存成功" : result.RMsg,
                type: result.RCode == 0 ? "success" : "error",
                showConfirmButton: false,
                timer: 2000
            });
        }

        /**
        * 获取视图数据回调
        */
        function getViewData_callback(result) {
            if (result.RCode != 0) {
                return swal({
                    title: "错误",
                    text: result.RMsg,
                    type: "error",
                    showConfirmButton: false,
                    timer: 2000
                });
            }

            //渲染页面
            var htmlObj = renderView(result.Data);

            //初始化验证
            setValidator(htmlObj, result.Data);

            $(".tabpanel").append(htmlObj);
            //关闭Loading
            swal.close();
        }

        /**
        * 设置验证
        */
        function setValidator(htmlObj, view_data) {
            var validateRules = {
                rules: {},
                messages: {}
            };

            //生成验证rule与message
            _.each(view_data.SettingGroups, function (a, b, c) {
                _.each(a.Settings, function (item, index, list) {
                    //生成验证对象
                    validateRules.rules[item.Name] = {};
                    validateRules.messages[item.Name] = {};

                    if (item.Required) {
                        //全类型必填校验
                        validateRules.rules[item.Name].required = true;
                        validateRules.messages[item.Name].required = item.DisplayName + "必须填写";
                    }
                    if (item.TextReg) {
                        validateRules.rules[item.Name].regex = item.TextReg;
                        validateRules.messages[item.Name].regex = item.DisplayName + "规则验证失败";
                    }

                    if ((item.ValueType == "TEXT" || item.ValueType == "Option") && item.MinLength && item.MinLength > 0) {
                        //文本与选项最小长度校验
                        validateRules.rules[item.Name].minlength = item.MinLength;
                        validateRules.messages[item.Name].minlength = item.DisplayName + "最少长度为：" + item.MinLength;
                    }

                    if ((item.ValueType == "TEXT" || item.ValueType == "Option") && item.MaxLength && item.MaxLength > 0) {
                        //文本与选项最大长度校验
                        validateRules.rules[item.Name].maxlength = item.MaxLength;
                        validateRules.messages[item.Name].maxlength = item.DisplayName + "最大长度为：" + item.MaxLength;
                    }

                    if (item.ValueType == "DATE" || item.ValueType == "DATE-TIME") {
                        //包含日期的时间校验
                        validateRules.rules[item.Name].local_date = true;
                        validateRules.messages[item.Name].local_date = item.DisplayName + "必须是日期时间类型的数据";
                    }

                    if (item.ValueType == "TIME") {
                        //时间校验
                        validateRules.rules[item.Name].local_time = true;
                        validateRules.messages[item.Name].local_time = item.DisplayName + "必须是时间类型的数据";
                    }

                    if ((item.ValueType == "DATE" || item.ValueType == "DATE-TIME") && item.MaxLength) {
                        //包含日期的时间最大值校验
                        validateRules.rules[item.Name].max_date = item.MaxLength;
                        validateRules.messages[item.Name].max_date = item.DisplayName + "最晚不能晚于" + item.MaxLength;
                    }
                    if ((item.ValueType == "DATE" || item.ValueType == "DATE-TIME") && item.MinLength) {
                        //包含日期的时间最大值校验
                        validateRules.rules[item.Name].min_date = item.MinLength;
                        validateRules.messages[item.Name].min_date = item.DisplayName + "最早不能早于" + item.MinLength;
                    }
                    if (item.ValueType == "TIME" && item.MaxLength) {
                        //包含日期的时间最大值校验
                        validateRules.rules[item.Name].max_time = item.MaxLength;
                        validateRules.messages[item.Name].max_time = item.DisplayName + "最晚不能晚于" + item.MaxLength;
                    }
                    if (item.ValueType == "TIME" && item.MinLength) {
                        //包含日期的时间最大值校验
                        validateRules.rules[item.Name].min_time = item.MinLength;
                        validateRules.messages[item.Name].min_time = item.DisplayName + "最早不能早于" + item.MinLength;
                    }
                });
            });

            htmlObj.find("form").validate({
                errorElement: 'div',
                errorClass: 'help-block',
                focusInvalid: true,
                rules: validateRules.rules,
                messages: validateRules.messages,
                ignore: [],
                highlight: function (e) {
                    $(e).closest('.form-group').addClass('has-error');
                    $("a[aria-controls=" + $(e).data("group-id") + "]").parent().addClass("error");
                },
                success: function (e) {
                    $(e).closest('.form-group').removeClass('has-error');
                    $(e).remove();
                    if ($(".has-error").length == 0) {
                        $("li.error").removeClass("error");
                    }
                },
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });
        }

        /**
        * 根据视图数据渲染视图
        */
        function renderView(view_data) {
            //处理
            _.each(view_data.SettingGroups, function (a, b, c) {
                _.each(a.Settings, function (item, index, list) {
                    if (item.ValueType != "OPTION") {
                        return;
                    }
                    var values = item.OptionValue.split(",");
                    var texts = item.OptionText.split(",");
                    var selected = item.Value.split(",");

                    var renderData = [];

                    for (var i = 0; i < values.length; i++) {
                        renderData.push({
                            name: texts[i],
                            value: values[i],
                            selected: _.contains(selected, values[i]) ? "selected='selected'" : null
                        });
                    }

                    //注入到对象中
                    item.render_data = renderData;
                });
            });

            //开始渲染
            var htmlObj = $($("#sys-setting-tpl").render(view_data));
            //激活第一个标签
            htmlObj.find(".tab-nav li:first-child").addClass("active");
            htmlObj.find(".tab-content div:first-child").addClass("active");

            //初始化时间控件
            jackTool.tools.view.build_fg_datetime_picker(htmlObj);
            //初始化文本控件
            jackTool.tools.view.build_fg_input(htmlObj);
            //初始化下拉菜单控件
            jackTool.tools.view.build_select(htmlObj);

            return htmlObj;
        }
    </script>

}
